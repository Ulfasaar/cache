// Generated by Haxe 3.4.4
(function ($hx_exports) { "use strict";
$hx_exports["cache"] = $hx_exports["cache"] || {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var cache_Cache = $hx_exports["cache"]["Cache"] = function(refresh,empty) {
	this.isInit = true;
	this._refresh = refresh;
	this._empty = empty;
};
cache_Cache.prototype = {
	get: function() {
		if(this.isInit) {
			this.data = this._refresh();
			this.isInit = false;
		}
		return this.data;
	}
	,refresh: function() {
		this.data = this._refresh();
	}
	,empty: function() {
		this.data = this._empty();
	}
};
var cache_HybridCache = $hx_exports["cache"]["HybridCache"] = function(timeout_ms,refresh,get_version,empty) {
	this.hasElapsed = false;
	cache_Cache.call(this,refresh,empty);
	this.timeout = timeout_ms;
	this.current_time = new Date().getTime();
	this.prev_time = this.current_time;
	this.diff_time = this.current_time - this.prev_time;
	this.get_version = get_version;
	this.current_version = this.get_version();
};
cache_HybridCache.__super__ = cache_Cache;
cache_HybridCache.prototype = $extend(cache_Cache.prototype,{
	version: function() {
		return this.current_version;
	}
	,get: function() {
		if(this.isInit == false) {
			if(this.timeout != -1) {
				this.current_time = new Date().getTime();
				this.diff_time = this.current_time - this.prev_time;
				if(this.diff_time >= this.timeout) {
					var external_version = this.get_version();
					if(this.current_version < external_version) {
						this._refresh();
						this.current_version = external_version;
					}
					this.prev_time = this.current_time;
				}
			}
		} else {
			this.data = this._refresh();
			this.isInit = false;
		}
		return this.data;
	}
});
var cache_TimeoutCache = $hx_exports["cache"]["TimeoutCache"] = function(timeout_ms,refresh,empty) {
	this.hasElapsed = false;
	cache_Cache.call(this,refresh,empty);
	this.timeout = timeout_ms;
	this.current_time = new Date().getTime();
	this.prev_time = this.current_time;
	this.diff_time = this.current_time - this.prev_time;
};
cache_TimeoutCache.__super__ = cache_Cache;
cache_TimeoutCache.prototype = $extend(cache_Cache.prototype,{
	get: function() {
		if(this.isInit == false) {
			if(this.timeout != -1) {
				this.current_time = new Date().getTime();
				this.diff_time = this.current_time - this.prev_time;
				if(this.diff_time >= this.timeout) {
					this.data = this._refresh();
					this.prev_time = this.current_time;
				}
			}
		} else {
			this.data = this._refresh();
			this.isInit = false;
		}
		return this.data;
	}
});
var cache_VersionedCache = $hx_exports["cache"]["VersionedCache"] = function(refresh,get_version,empty) {
	this.current_version = 0.0;
	cache_Cache.call(this,refresh,empty);
	this.get_version = get_version;
	this._empty = empty;
	this.current_version = this.get_version();
};
cache_VersionedCache.__super__ = cache_Cache;
cache_VersionedCache.prototype = $extend(cache_Cache.prototype,{
	version: function() {
		return this.current_version;
	}
	,get: function() {
		if(this.isInit) {
			this.data = this._refresh();
			this.isInit = false;
		} else {
			var external_version = this.get_version();
			if(this.current_version < external_version) {
				this.data = this._refresh();
				this.current_version = external_version;
			}
		}
		return this.data;
	}
});
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
